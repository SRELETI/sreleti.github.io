<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="http://localhost:4000/codebetter/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/codebetter/" rel="alternate" type="text/html" /><updated>2017-03-10T18:23:32-05:00</updated><id>http://localhost:4000/codebetter/</id><title type="html">Sudeep On Software</title><subtitle>My site for demonstrating and sharing my thoughts about different software development tools and processes.
</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/codebetter/jekyll/update/2017/03/10/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-03-10T15:08:52-05:00</published><updated>2017-03-10T15:08:52-05:00</updated><id>http://localhost:4000/codebetter/jekyll/update/2017/03/10/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/codebetter/jekyll/update/2017/03/10/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Mocking for Testing</title><link href="http://localhost:4000/codebetter/testing/2016/12/30/mocking.html" rel="alternate" type="text/html" title="Mocking for Testing" /><published>2016-12-30T02:15:30-05:00</published><updated>2016-12-30T02:15:30-05:00</updated><id>http://localhost:4000/codebetter/testing/2016/12/30/mocking</id><content type="html" xml:base="http://localhost:4000/codebetter/testing/2016/12/30/mocking.html">&lt;h2 id=&quot;test-doubles&quot;&gt;Test Doubles&lt;/h2&gt;

&lt;p&gt;There are four types of test doubles&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dummy Object&lt;/li&gt;
  &lt;li&gt;Stubs&lt;/li&gt;
  &lt;li&gt;Mocks&lt;/li&gt;
  &lt;li&gt;Fake Object&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;dummy-objects&quot;&gt;Dummy Objects&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The Dummy Objects are used when there is a requirement for a object(will call it first object) to exist to create a different object(Will call it second object). The only purpose of the first object is for creating the second object. If instantiating the first object is expensive, then a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dummy Object&lt;/code&gt; can be used in its place. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Dummy Objects&lt;/code&gt; act as &lt;code class=&quot;highlighter-rouge&quot;&gt;placeholders&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;stubs&quot;&gt;Stubs&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The inputs to a SUT can come from other forms different from the input parameters. They can be from other objects. If the SUT calls another object and decides the next action based on the outcome of the call to the other object, then the SUT is said to be getting input from the other object. If instantiating the other object is a expensive operation, then you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;stubs&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Test Spy&lt;/code&gt; can be used to spy an object and verify a certain operation is performed on a object. It can be used to verify &lt;code class=&quot;highlighter-rouge&quot;&gt;indirect outputs&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mocks&quot;&gt;Mocks&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Mocks&lt;/code&gt; can perform both operations which &lt;code class=&quot;highlighter-rouge&quot;&gt;Stubs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Test Spys&lt;/code&gt; perform.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fake-object&quot;&gt;Fake Object&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Fake Object&lt;/code&gt; can be used to instantiate a simpler version of a object rather than a real expsenive one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mocking&quot;&gt;Mocking&lt;/h2&gt;

&lt;h3 id=&quot;mockito&quot;&gt;Mockito&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://site.mockito.org/&quot;&gt;A Mocking Framework in Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mock-server&quot;&gt;Mock Server&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mock-server.com/&quot;&gt;A Mocking Framework for http/https servers.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Test Doubles</summary></entry><entry><title type="html">jUnit Framework</title><link href="http://localhost:4000/codebetter/testing/2016/12/28/jUnit.html" rel="alternate" type="text/html" title="jUnit Framework" /><published>2016-12-28T04:20:30-05:00</published><updated>2016-12-28T04:20:30-05:00</updated><id>http://localhost:4000/codebetter/testing/2016/12/28/jUnit</id><content type="html" xml:base="http://localhost:4000/codebetter/testing/2016/12/28/jUnit.html">&lt;h2 id=&quot;junit-test-framework&quot;&gt;jUnit Test Framework&lt;/h2&gt;

&lt;h3 id=&quot;core-classes&quot;&gt;Core Classes:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;TestCase: All the testclasses extend this class. This class contains the setup, teardown methods&lt;/li&gt;
  &lt;li&gt;TestSuite: Allows you to group a bunch of tests and run them by passing just the TestSuite object to the TestRunner.&lt;/li&gt;
  &lt;li&gt;TestRunner: Allows you to trigger the test run.&lt;/li&gt;
  &lt;li&gt;TestResult: Stores the test results&lt;/li&gt;
  &lt;li&gt;Assert: Provides methods to do self verification.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">jUnit Test Framework</summary></entry></feed>